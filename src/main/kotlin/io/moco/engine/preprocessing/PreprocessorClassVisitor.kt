package io.moco.engine.preprocessing

import io.moco.utils.ASMInfoUtil
import org.objectweb.asm.*


class PreprocessorClassVisitor(val cw: ClassVisitor?) :
    ClassVisitor(ASMInfoUtil.ASM_VERSION, cw) {

    private var className: String? = null
    private var hasStaticInitializer = false

    override fun visit(
        version: Int, access: Int, name: String?, signature: String?,
        superName: String?, interfaces: Array<String?>?
    ) {
        super.visit(version, access, name, signature, superName, interfaces)
        className = name
    }

    override fun visitMethod(
        access: Int, name: String?,
        desc: String?, signature: String?, exceptions: Array<String?>?
    ): MethodVisitor {
        val methodVisitor = cv.visitMethod(
            access, name, desc,
            signature, exceptions
        )


        // Ignore synthetic methods (generated by compiler)

        // return if (access and Opcodes.ACC_BRIDGE != 0) {
        // TODO: testing on kotlin code so temporarily comment out the acc_bridge condition
        return if (true) {
            if (name == "<clinit>") {
                hasStaticInitializer = true
            }
            return PreprocessorMethodVisitor(
                this, className!!,
                methodVisitor, access,
                name, desc, signature, exceptions
            )
        } else {
            methodVisitor
        }
    }

    //TODO: check whether a class is already processed or not -> will be handled in preprocessorTracker

    fun shouldVisit(className: String?): Boolean {
        return true
    }
}